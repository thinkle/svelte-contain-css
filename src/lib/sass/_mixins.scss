@function var-with-fallbacks($base-var, $args...) {
  // Remove the initial -- from the base variable for concatenation purposes
  $base-var-name: str-slice($base-var, 3);
  $fallback : nth($args,length($args));

  // Initialize the result with the final fallback value
  $result: var($base-var,$fallback);

  // Check if only one argument (apart from $base-var) is provided
  @if length($args)==1 {
    // Only one argument means it's the fallback value
    @return var(#{$base-var}, #{$fallback});
  }

  // Iterate through the prefixes in reverse order
  @for $i from length($args)-1 through 1 {
    $prefix: nth($args,$i);
    // Construct the variable name by concatenating the prefix and base variable name
    // e.g., --card-bg if $prefix is 'card' and $base-var-name is 'bg'
    $prefixed-var: unquote('--#{$prefix}-#{$base-var-name}');
    // Nest the current prefixed variable as a fallback to the current result
    $result: var(#{$prefixed-var}, #{$result});
  }

  // Return the final CSS var() function with all fallbacks
  // e.g., var(--card-bg, var(--container-bg, var(--bg, white)))
  @return #{$result};
}

@mixin color-props ($prefixes...) {
  background: var-with-fallbacks(--bg, append($prefixes,white)...);
  color: var-with-fallbacks(--fg, append($prefixes,black)...);
  //text-shadow: var-with-fallbacks(--text-shadow,append($prefixes,#0000));
}

@mixin typography-props ($prefixes...) {
  font-family: var-with-fallbacks(--font-family, append($prefixes, sans-serif)...);
  text-transform: var-with-fallbacks(--text-transform, append($prefixes, none)...);
  text-decoration: var-with-fallbacks(--text-decoration, append($prefixes, none)...);
  font-size: var-with-fallbacks(--font-size, append($prefixes, 16px)...);
  font-weight: var-with-fallbacks(--font-weight, append($prefixes, 400)...);
  line-height: var-with-fallbacks(--line-height, append($prefixes, 1.5)...);
  letter-spacing: var-with-fallbacks(--letter-spacing, append($prefixes, 0.05em)...);
}

@mixin typography-container-props ($prefixes...) {
  @include typography-props($prefixes...);  
  & :global(p),:global(blockquote),:global(dl),:global(ul),:global(ol) {
    max-width: var-with-fallbacks(--line-width, append($prefixes, 40em)...);
    font-family: var-with-fallbacks(--body-font-family, append($prefixes, var(--font-family))...);
    line-height: var-with-fallbacks(--line-height, append($prefixes, 1.5)...);
    margin-left: auto;
    margin-right: auto;
  }  
  & :global(h1),
   :global(h2),
   :global(h3),
   :global(h4),
   :global(h5),
   :global(h6) {
    max-width: var-with-fallbacks(--line-width, append($prefixes, 40em)...);
    font-family: var-with-fallbacks(--heading-font-family, append($prefixes, var(--font-family))...);
    margin-left: auto;
    margin-right: auto;
  }   
}

@mixin padding-props ($prefixes...) {
  padding: var-with-fallbacks(--padding, append($prefixes, 4px)...);
}

@mixin border-props ($prefixes...) {
  border: var-with-fallbacks(--border, $prefixes...);  
  $directions: (
    top,
    right,
    bottom,
    left
  );
  $rectProps : (border);

  // Loop through each direction
  @each $dir in $directions {
    // Apply prop for each direction
    @each $p in $rectProps {
      #{$p}-#{$dir}: var-with-fallbacks(--#{$p}-#{$dir},
        append($prefixes,
          var-with-fallbacks(--#{$p},
            append($prefixes, 4px)...))...);
    }
  }
}


@mixin box-props-square($prefixes...) {
  box-sizing: border-box;   
  @include border-props($prefixes...);
  @include padding-props($prefixes...);
  border-radius: var-with-fallbacks(--square-radius, append($prefixes, 0)...);
}

@mixin box-props($prefixes...) {
  // Using the var-with-fallbacks function for each property
  box-sizing: border-box;
  @include padding-props($prefixes...);
  @include border-props($prefixes...);
  border-radius: var-with-fallbacks(--border-radius, append($prefixes,none)...);
}

@mixin box-props-bottom ($prefixes...) {
  // Using the var-with-fallbacks function for each property
  box-sizing: border-box;
  @include padding-props($prefixes...);
  @include border-props($prefixes...);
  border-bottom-right-radius: var-with-fallbacks(--border-radius, $prefixes...);
  border-bottom-left-radius: var-with-fallbacks(--border-radius, $prefixes...);
}
@mixin box-props-top ($prefixes...) {
  // Using the var-with-fallbacks function for each property
  box-sizing: border-box;
  @include padding-props($prefixes...);
  @include border-props($prefixes...);  
  border-top-right-radius: var-with-fallbacks(--border-radius, $prefixes...);
  border-top-left-radius: var-with-fallbacks(--border-radius, $prefixes...);
}

@mixin box-shadow($prefixes...) {  
  box-shadow: 
    var-with-fallbacks(--shadow-distance, append($prefixes, 4px)...)
    var-with-fallbacks(--shadow-distance, append($prefixes, 4px)...)
    0 
    var-with-fallbacks(--shadow-color, append($prefixes, green)...);
  box-shadow: 4px 4px 0  green;
}

@mixin clickable($prefixes...) {
  cursor: pointer;
  transition: filter,transform var-with-fallbacks(--transition,button,control,300ms);
  &:hover {
    filter: var-with-fallbacks(--hover-filter, append($prefixes, brightness(1.1))...);
    transform: var-with-fallbacks(--hover-transform, append($prefixes, none)...);
  }
  &:active {
      filter: var-with-fallbacks(--hover-filter, append($prefixes, brightness(0.9))...);
      transform: var-with-fallbacks(--hover-transform, append($prefixes, translate(var(--space),var(--space)))...);
    }
}

@mixin custom-scrollbar($prefixes...) {
  overflow-y: auto;

  // Customizing the scrollbar
  &::-webkit-scrollbar {
    width: var-with-fallbacks(--scrollbar-width, append($prefixes, var(--space-md))...);
    height: var-with-fallbacks(--scrollbar-height, append($prefixes, var(--gap))...);
  }

  &::-webkit-scrollbar-track {
    background: var-with-fallbacks(--scrollbar-track-bg, append($prefixes, var(--bg))...);
  }

  &::-webkit-scrollbar-thumb {
    background: var-with-fallbacks(--scrollbar-thumb-bg, append($prefixes, var(--stripe-bg))...);

    border-radius: var-with-fallbacks(--scrollbar-thumb-radius, append($prefixes, var(--border-radius))...);

    &:hover {
      background: var-with-fallbacks(--scroll-hover-bg, append($prefixes, var(--secondary-bg))...);
      
    }
  }

  // For Firefox
  scrollbar-width: var-with-fallbacks(--scrollbar-width, append($prefixes, thin)...);
  scrollbar-color: var-with-fallbacks(--scrollbar-thumb-bg, append($prefixes, #888)...) var-with-fallbacks(--scrollbar-track-bg, append($prefixes, var(--border-color))...);
}

/* Convenience groupings */

@mixin global-buttons {
  & :global(a),
  & :global(button),
  & :global(input[type="submit"]),
  & :global(.button) {
    @content
  }
}

@mixin responsive-content ($max-width: null, $min-width: null) {
  @if $max-width {
    @container (max-width: #{$max-width}) {
      @content;
    }

    @media (max-width: #{$max-width}) {
      @content;
    }
  }

  @if $min-width {
    @container (min-width: #{$min-width}) {
      @content;
    }

    @media (min-width: #{$min-width}) {
      @content;
    }
  }
}